using System;
using System.Collections.Generic;
using System.Text;

namespace Algorithm
{
    /// <summary>
    /// 通用的帮助类
    /// </summary>
    public static class Helper
    {
        /// <summary>
        /// int类型转换成byte数组
        /// </summary>
        /// <param name="dec"></param>
        /// <returns></returns>
        public static byte[] Int32ToByteArr(int sum)
        {
            List<byte> result = new List<byte>();
            if (sum != 0)
            {
                while (sum >= 1)
                {
                    byte mod = Convert.ToByte(sum % 10);
                    result.Add(mod);
                    sum = (sum - mod) / 10;
                }
            }
            else
            {
                result.Add(0);
            }
            return result.ToArray();
        }

        /// <summary>
        /// byte数组转换成int类型
        /// 只支持UInt32
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        public static int ByteArrToInt32(byte[] arr)
        {
            if (arr.Length > 10)
                throw new OutOfMemoryException();
            int number = 0;
            int idx = 0;
            foreach (var item in arr)
            {
                number += Convert.ToInt32(item * Math.Pow(10, arr.Length-1-idx));
                idx++;
            }
            return number;
        }

        /// <summary>
        /// 数值逆序
        /// 因为逆序之后有可能越界，所以，需要定义一个long类型的来存储
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static int IntegerRevert(int source)
        {
            long destination = 0;
            bool isLessThenZero = source<0?true:false;
            if (source == int.MinValue)
                return 0;
            source = Math.Abs(source);
            int idx = 0;
            int length = source.ToString().Length;
            while (source >= 1)
            {
                int mod = source % 10;
                destination += mod * Convert.ToInt64(Math.Pow(10, length - 1 - idx));
                source = (source - mod) / 10;
                idx++;
            }
            if (isLessThenZero)
            {
                return 0 - destination < int.MinValue ? 0 : 0 - Convert.ToInt32(destination);
            }
            else
            {
                return destination > int.MaxValue ? 0 : Convert.ToInt32(destination);
            }
        }

        /// <summary>
        /// 别人的算法，可以试下效率
        /// 内存使用降低了，时间并没有提升
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        public static int Revert(int x)
        {
            int x_rev = 0;
            if (x >= 0)
            {
                while (x>=1)
                {
                    if ((int.MaxValue - x % 10) / 10 < x_rev)
                    {
                        return 0;
                    }
                    x_rev = 10 * x_rev + x % 10;
                    x /= 10;
                }
            }
            else
            {
                while (x<0)
                {
                    if ((int.MinValue - x % 10) / 10 > x_rev)
                    {
                        return 0;
                    }
                    x_rev = 10 * x_rev + x % 10;
                    x /= 10;
                }
            }
            return x_rev;
        }
    }
}
